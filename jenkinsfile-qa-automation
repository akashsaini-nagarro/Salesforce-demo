#!groovy

node {

	def DELTACHANGES = 'deltachanges'
	def DEPLOYDIR = 'toDeploy'
	def APIVERSION = '54.0'
    def toolbelt = tool 'toolbelt'
	def SF_INSTANCE_URL = env.SF_INSTANCE_URL_DEV
	def SERVER_KEY_CREDENTIALS_ID = env.SERVER_KEY_CREDENTIALS_ID_DEV
	def SF_CONSUMER_KEY = env.SF_CONSUMER_KEY_DEV
	def SF_USERNAME = env.SF_USERNAME_DEV
	def PreviousCommitId = env.GIT_PREVIOUS_SUCCESSFUL_COMMIT
    echo ${env.GIT_PREVIOUS_SUCCESSFUL_COMMIT}
    def LatestCommitId = 'HEAD'
    def Environment = 'DEV'
    def Deployment_Type = 'Validate Only'
    def TESTLEVEL = 'NoTestRun'
    def Branch = 'dev'


    stage('Clean Workspace') {
        try {
            deleteDir()
        }
        catch (Exception e) {
		currentBuild.result = "FAILED"
		println('Unable to Clean WorkSpace.')
		emailext (attachLog: false, 
		body: 'Error: Unable to Clean WorkSpace. \n\nPrevious Commit ID : $PreviousCommitId \nLatest Commit ID : $LatestCommitId \nDeployment Type : $Deployment_Type \nTest Level :  $TESTLEVEL \nCreated by : $BUILD_USER \nEnvironment : $Environment \nBranch : $Branch \nBuild Status : $BUILD_STATUS! \n\nClick on below link after connecting to Garnet VPN to view build results. \n\n$BUILD_URL/console', 
		subject: '$DEFAULT_SUBJECT', 
		to: '$DEFAULT_RECIPIENTS')
		throw e       
        }
    }
    // -------------------------------------------------------------------------
    // Check out code from source control.
    // -------------------------------------------------------------------------

    stage('checkout source') {
		try
		{
		   git branch: "${params.Branch}", url: 'https://github.com/akashsaini-nagarro/Salesforce-demo.git'
		} catch (Exception e) {
		currentBuild.result = "FAILED"
		println('Error in checking out the code from Git repository.')
		emailext (attachLog: false, 
		body: 'Error: Error in checking out the code from Git repository. \n\nPrevious Commit ID : $PreviousCommitId \nLatest Commit ID : $LatestCommitId \nDeployment Type : $Deployment_Type \nTest Level :  $TESTLEVEL \nCreated by : $BUILD_USER \nEnvironment : $Environment \nBranch : $Branch \nBuild Status : $BUILD_STATUS! \n\nClick on below link after connecting to Garnet VPN to view build results. \n\n$BUILD_URL/console', 
		subject: '$DEFAULT_SUBJECT', 
		to: '$DEFAULT_RECIPIENTS')
		throw e  
		}
	}

    // -------------------------------------------------------------------------
    // Run all the enclosed stages with access to the Salesforce
    // JWT key credentials.
    // -------------------------------------------------------------------------

 	withEnv(["HOME=${env.WORKSPACE}"]) {	
	
	    withCredentials([file(credentialsId: SERVER_KEY_CREDENTIALS_ID, variable: 'server_key_file')]) {
		// -------------------------------------------------------------------------
		// Authenticate to Salesforce using the server key.
		// -------------------------------------------------------------------------

		stage('Authorize to Salesforce') {
			
			rc = command "${toolbelt}/sfdx auth:jwt:grant --instanceurl ${SF_INSTANCE_URL} --clientid ${SF_CONSUMER_KEY} --jwtkeyfile ${server_key_file} --username ${SF_USERNAME} --setalias ${SF_USERNAME}"
		    if (rc != 0) 
			{
				currentBuild.result = "FAILED"
				
				emailext (attachLog: false, 
				body: 'Error: Salesforce org authorization failed. \n\nPrevious Commit ID : $PreviousCommitId \nLatest Commit ID : $LatestCommitId \nDeployment Type : $Deployment_Type \nTest Level :  $TESTLEVEL \nCreated by : $BUILD_USER \nEnvironment : $Environment \nBranch : $Branch \nBuild Status : $BUILD_STATUS! \n\nClick on below link after connecting to Garnet VPN to view build results. \n\n$BUILD_URL/console', 
				subject: '$DEFAULT_SUBJECT', 
				to: '$DEFAULT_RECIPIENTS')
				
				error 'Salesforce org authorization failed.'
		    }
		}


		stage('Delta changes')
		{
			script
            {
                bat "echo y | sfdx plugins:install sfpowerkit"
                rc = command "${toolbelt}/sfdx sfpowerkit:project:diff --revisionfrom %PreviousCommitId% --revisionto %LatestCommitId% --output ${DELTACHANGES} --apiversion ${APIVERSION} -x"
                if (rc != 0) 
				{
					currentBuild.result = "FAILED"
					emailext (attachLog: false, 
					body: 'Error: Unable to generate Delta changes. \n\nPrevious Commit ID : $PreviousCommitId \nLatest Commit ID : $LatestCommitId \nDeployment Type : $Deployment_Type \nTest Level :  $TESTLEVEL \nCreated by : $BUILD_USER \nEnvironment : $Environment \nBranch : $Branch \nBuild Status : $BUILD_STATUS! \n\nClick on below link after connecting to Garnet VPN to view build results. \n\n$BUILD_URL/console', 
					subject: '$DEFAULT_SUBJECT', 
					to: '$DEFAULT_RECIPIENTS')
					error 'Unable to generate Delta changes.'
				} 
				def folder = fileExists 'DeltaChanges/force-app'
				def file = fileExists 'DeltaChanges/destructiveChanges.xml'
    
				if( folder && !file )
				{
					dir("${WORKSPACE}/${DELTACHANGES}")
					{
						println "Force-app folder exist, destructiveChanges.xml doesn't exist"
						rc = command "${toolbelt}/sfdx force:source:convert -d ../${DEPLOYDIR}"
						if (rc != 0) 
						{
							currentBuild.result = "FAILED"
							emailext (attachLog: false, 
							body: 'Error: Failed to convert metadata in mdapi format. \n\nPrevious Commit ID : $PreviousCommitId \nLatest Commit ID : $LatestCommitId \nDeployment Type : $Deployment_Type \nTest Level :  $TESTLEVEL \nCreated by : $BUILD_USER \nEnvironment : $Environment \nBranch : $Branch \nBuild Status : $BUILD_STATUS! \n\nClick on below link after connecting to Garnet VPN to view build results. \n\n$BUILD_URL/console', 
							subject: '$DEFAULT_SUBJECT', 
							to: '$DEFAULT_RECIPIENTS')
							error 'Failed to convert metadata in mdapi format.'
						}
					}
				} 
				else if ( !folder && file ) 
				{
					bat "copy manifest\\package.xml ${DELTACHANGES}"
					println "Force-app folder doesn't exist, destructiveChanges.xml exist" 
				}
				else if ( folder && file ) 
				{
					dir("${WORKSPACE}/${DELTACHANGES}")
					{
							rc = command "${toolbelt}/sfdx force:source:convert -d ../${DEPLOYDIR}"
							bat "copy destructiveChanges.xml ..\\${DEPLOYDIR}"
							if (rc != 0) 
							{
								currentBuild.result = "FAILED"
								emailext (attachLog: false, 
								body: 'Error: Failed to convert metadata in mdapi format. \n\nPrevious Commit ID : $PreviousCommitId \nLatest Commit ID : $LatestCommitId \nDeployment Type : $Deployment_Type \nTest Level :  $TESTLEVEL \nCreated by : $BUILD_USER \nEnvironment : $Environment \nBranch : $Branch \nBuild Status : $BUILD_STATUS! \n\nClick on below link after connecting to Garnet VPN to view build results. \n\n$BUILD_URL/console', 
								subject: '$DEFAULT_SUBJECT', 
								to: '$DEFAULT_RECIPIENTS')
								error 'Failed to convert metadata in mdapi format.'
							}

					}
						
                        
					
				}
				
               
            }
        }



		stage('Validate Only') 
		{
			
				script
				{
					rc = command "${toolbelt}/sfdx force:mdapi:deploy -d ${DEPLOYDIR} --checkonly --wait 10 --targetusername ${SF_USERNAME} "
				}
					
					if (rc != 0) 
					{
						currentBuild.result = "FAILED"
						dir("${WORKSPACE}/${DEPLOYDIR}")
						{
						emailext (attachLog: false, 
						attachmentsPattern: 'package.xml, destructiveChanges.xml',
						body: 'Error: Metadata Validation Failed. \n\nPrevious Commit ID : $PreviousCommitId \nLatest Commit ID : $LatestCommitId \nDeployment Type : $Deployment_Type \nTest Level :  $TESTLEVEL \nCreated by : $BUILD_USER \nEnvironment : $Environment \nBranch : $Branch \nBuild Status : $BUILD_STATUS! \n\nClick on below link after connecting to Garnet VPN to view build results. \n\n$BUILD_URL/console', 
						subject: '$DEFAULT_SUBJECT', 
						to: '$DEFAULT_RECIPIENTS')
						
						error 'Metadata Validation Failed.'
						}
					} 
				
				
   		}
		

        // -------------------------------------------------------------------------
		// Deploy metadata and execute unit tests.
		// -------------------------------------------------------------------------
		

		stage('Deploy Components') 
		{	
				script
				{
					rc = command "${toolbelt}/sfdx force:mdapi:deploy -d ${DEPLOYDIR} --wait 10 --targetusername ${SF_USERNAME} "
				}
					
					if (rc != 0) 
					{
						currentBuild.result = "FAILED"
						dir("${WORKSPACE}/${DEPLOYDIR}")
						{
						emailext (attachLog: false, 
						attachmentsPattern: 'package.xml, destructiveChanges.xml',
						body: 'Error: Metadata Deployment Failed. \n\nPrevious Commit ID : $PreviousCommitId \nLatest Commit ID : $LatestCommitId \nDeployment Type : $Deployment_Type \nTest Level :  $TESTLEVEL \nCreated by : $BUILD_USER \nEnvironment : $Environment \nBranch : $Branch \nBuild Status : $BUILD_STATUS! \n\nClick on below link after connecting to Garnet VPN to view build results. \n\n$BUILD_URL/console', 
						subject: '$DEFAULT_SUBJECT', 
						to: '$DEFAULT_RECIPIENTS')
						
						error 'Metadata Deployment Failed.'
						}
					} 		
		}

		
		stage('EMail Notification')
		{
			bat 'chdir'

				dir("${WORKSPACE}/${DEPLOYDIR}")
				{
					emailext (attachLog: false, 
					attachmentsPattern: 'package.xml',
					body: 'Previous Commit ID : $PreviousCommitId \nLatest Commit ID : $LatestCommitId \nDeployment Type : $Deployment_Type \nTest Level :  $TESTLEVEL \nCreated by : $BUILD_USER \nEnvironment : $Environment \nBranch : $Branch \nBuild Status : $BUILD_STATUS! \n\n\n Metadata Deployment Successful. \n\nClick on below link after connecting to Garnet VPN to view build results. \n\n$BUILD_URL/console', 
					subject: '$DEFAULT_SUBJECT', 
					to: '$DEFAULT_RECIPIENTS')
					
				}
			
			
		}
	
	
		}
	}

}


	
def command(script) {
    if (isUnix()) {
        return sh(returnStatus: true, script: script);
    } else {
		return bat(returnStatus: true, script: script);
    }
}
